#!/bin/bash
# version 0.014

THEMES_DIR="$HOME/.local/share/console-colors"
       XTC="xtermcontrol"

die() {
    printf '%b\n' >&2 "\033[36m[E] $*\033[0m"
    exit 1
}

warn() {
    printf '%b\n' >&2 "\033[36m[W] $*\033[0m"
}

[[ -d "${THEMES_DIR}" ]] || { 
    mkdir -p "${THEMES_DIR}" || die "could not create ${THEMES_DIR}"
}

usage () {
    if [[ -n "${1:-}" ]]; then
	printf "${*}\n\n" >&2
    fi
    cat >&2 << EOF
Usage: ${0} [COMMAND]...

Commands and arguments:
   c,create theme path_to_image   Create a new theme from an existing image
   e,edit theme                   Open the theme in an editor
   l,list                         List existing themes
   s,switch theme                 Switch to the  specified theme - without updating .Xresources
   u,update theme                 Update .Xresources with the theme
   r,remove theme                 Remove theme                      
   a,audit theme                  Audit theme
   h,help                         Show this help info

EOF
    exit 1
}

# global variables
cmd=
theme_name=
path_to_image=
update=

# bash associative array of themes. key is theme name.
# value is 1 after quickloading all themes
declare -A themes

# theme_format: 2 possible values:
#       1: console_color format - one ^P9RRGGBB expression per line
#       2: .Xresources format   - either #RRGGBB or rgb:RR/GG/BB
theme_format=

color_theme_path=

# xres_theme can take the values
# xterm URxvt unknown
xres_theme=

colors=( background foreground cursor mouse_background mouse_foreground highlight border color0 color1 color2 color3 color4 color5 color6 color7 color8 color9 color10 color11 color12 color13 color14 color15 )
color_names=( black red green yellow blue magenta cyan white brblack brred brgreen bryellow brblue brmagenta brcyan brwhite )

color_theme_path="$THEMES_DIR"/"${opt_create_key:-${opt_apply_key}}"

on_console () {
    local _pattern='tty'
    if [[ "$(tty)" =~ ${_pattern} ]]; then
        return 0
    else
        return 1
    fi
}

unset_colors () {
    for color in ${colors[@]}; do
        unset ${!color}
    done
}

set_colors () {
    for color in ${colors[@]}; do
        [[ ${!color} ]] && change_color "$color" "${!color}"
    done
}

audit_color_theme () {
    local problems
    declare -a problems
    local start limit x
    declare -i start limit x
    case $theme_format in
        1) 
            start=7
            limit=${#colors[@]}
            ;;
        2)
            start=0
            limit=${#colors[@]}
            ;;
        *)
            die "theme format unknown"
            ;;
    esac

    for ((x=$start; x<$limit; x++));do
        color=${colors[$x]}
        if [ ! ${!color} ]; then
            problems+=( "\033[36m${color}\033[0m is not defined" )
        fi
    done
    if [ ${#problems[@]} -ne 0 ]; then
        echo >&2 "auditing $1:"
        for p in "${problems[@]}"
        do
            printf '%b\n' >&2 " * $p"
        done
    fi
}

load_console_color_theme () {
    # store the results in global variables color0..color15 in format P9RRGGNN
    local _key
    # x is line counter; y is non-empty line counter
    local x=y=0
    local line
    local regex_pattern_comment='^[\s]*#'
    local regex_pattern_color='^[\s]*(P)([0-9A-Fa-f])([0-9A-Fa-f]{6})'
    local _dec
    declare -i _dec x y
    _key="$theme_name"
    unset_colors
    while read -r line; do
        # printf '%s\n' "$line"
        x=$((x+1))
        [[ "$line" ]] || continue
        [[ "$line" =~ $regex_pattern_comment ]] && continue
        y=$((y+1))
        if [[ "$line" =~ $regex_pattern_color ]]; then
            _dec=$((16#${BASH_REMATCH[2]}))
            eval color${_dec}="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
        else
            printf 'syntax error in line #%d: %s\n' $x "${line}" >&2
            die "contains no valid color code"
        fi
    done < "${color_theme_path}"
    audit_color_theme "${_key}"
}

load_xresources_color_theme () {
# convert from xres format to console-color format
    local _key
    _key="${1##*/}"
    local regex_pattern
    declare -a regex_pattern
    # index 0 - empty line
    regex_pattern=('^$')
    # index 1 - hash-commented line
    regex_pattern+=('^[ ]+#')
    # index 2 - xres-commented-line
    regex_pattern+=('^!')
    # index 3 - has xterm
    regex_pattern+=('xterm')
    # index 4 - has URxvt
    regex_pattern+=('URxvt')
    # index 5 - has colorx:
    regex_pattern+=('(color[0-9]:)' )
    # index 6 - has colorxx:
    regex_pattern+=('(color[0-9]{2}:)')
    # index 7 - has hash color
    regex_pattern+=('(#[0-9a-fA-F]{6})')
    # index 8 - has hash rgb/xx/xx/xx color
    regex_pattern+=('(rgb:[0-9a-fA-F]{2}/[0-9a-fA-F]{2}/[0-9a-fA-F]{2})')
    # index 9 - has background:
    regex_pattern+=('[^_](background:)')
    # index 10 - has foreground:
    regex_pattern+=('(foreground:)')
    # index 11 - has cursor:
    regex_pattern+=('(cursor:)')
    # index 12 - has mouse_background:
    regex_pattern+=('(mouse_background:)')
    # index 13 - has mouse_foreground:
    regex_pattern+=('(mouse_foreground:)')
    # index 14 - has highlight:
    regex_pattern+=('(highlight:)')
    # index 15 - has border:
    regex_pattern+=('(border:)')
                     
    local lc=0 # line counter
    declare -i lc
    local _line
    local _errors=0
    
    # store line attributes in global variables color0..color15 background...
    # line attributes are stored in an array with index = index in pattern array 
    # i.e if the line has pattern 8, hash_attribs[8] will contain the match(es)
    local line_attribs file_attribs
    declare -a line_attribs file_attribs

    file_attribs=()
    local i 
    for i in  0 1 2 3 4; do
        file_attribs[$i]=0
    done
    local _theme
    declare -a _theme
    _theme=()

    local MAPFILE
    declare -a MAPFILE
    MAPFILE=()
    local _file="$1"
    mapfile -t -n 0 MAPFILE < <(cat "${color_theme_path}")

    for _line in "${MAPFILE[@]}"; do
        # printf -- '--->%s\n' "${_line}" >&2
        lc=$((lc+1))
        line_attribs=()
        local i 
        for i in  0 1 2 3 4; do
            line_attribs[$i]=0
            file_attribs[$i]=0
        done

        for i in 0 1 2 3 4; do
            if [[ "${_line}" =~ ${regex_pattern[$i]} ]]; then
                file_attribs[$i]=$((file_attribs[$i]+1))
                line_attribs[$i]=$((line_attribs[$i]+1))
            fi
        done

        for ((i=5; i<16; i++)); do
            if [[ "${_line}" =~ ${regex_pattern[$i]} ]]; then
                line_attribs[$i]="${BASH_REMATCH[1]}"
            fi
        done

        # evaluate line attributes here
        # do not convert the color codes
        local _attrib _color_index _color _rgb color_index_code

        # skip comment line
        (( "${line_attribs[2]}" > 0 )) && continue

        for i in 5 6 9 10 11 12 13 14 15; do
            if [[ "${line_attribs[$i]}" ]]; then
                _color="${line_attribs[$i]}"
                _color="${_color/%:}"
                if [[ "${line_attribs[7]}" ]]; then
                    eval "${_color}=${line_attribs[7]}"
                elif [[ "${line_attribs[8]}" ]]; then
                    eval "${_color}=${line_attribs[8]}"
                else
                    _error_msg=$(printf 'syntax error: line %d has invalid color definition\n' ${lc})
                    warn "${_error_msg}"
                fi
            fi
        done
    done

    # evaluate global attributes
    if (( ${file_attribs[1]} > 0 )) && (( ${file_attribs[2]} > 0 )); then
        printf '%s\n' "input file contains a mix of comment syntaxes" >&2
    fi
    
    if (( ${file_attribs[3]} > 0 )) && (( ${file_attribs[4]} > 0 )); then
        printf '%s\n' "input file contains a mix of xterm and urxt attributes" >&2
        errors=$((errors+1))
    fi
    
    xres_theme="unknown"
    (( ${file_attribs[4]} > 0 )) && xres_theme="URxvt"
    (( ${file_attribs[3]} > 0 )) && xres_theme="xterm"

    if (( ${_errors} > 0 )); then
        printf '%d errors encountered while parsing file %s\n' $errors >&2
        exit 1
    fi

    audit_color_theme
}

load_color_theme () {
    # determine format of the theme file: console_colors or xres format?
    # sets global variable theme_format
    local _key
    _key="$theme_name"
    local _pattern 
    _pattern='P[0-9a-fA-F]{7}'
    local -i _count
    _count=$(grep -c -E ${_pattern} "${THEMES_DIR}/${_key}")
    if (( _count > 5 )); then
        theme_format=1
        load_console_color_theme "${_key}"
#     elif (( _count > 0 )) && (( _count < 16 )); then
#         local _errmsg=$(printf 'theme %s is not complete: 
# only %d out of 16 color definitions are  present' "${_key}" ${_count})
#         die "${_errmsg}"
#     elif (( _count > 16 )); then
#         local _errmsg=$(printf 'theme %s contains %d color definitions
# while 16 is the maximum allowed for this format' "${_key}" ${_count})
#         die "${_errmsg}"
    else
        theme_format=2
        load_xresources_color_theme "${_key}"
    fi

    # printf '%s ' "${theme_colors[@]}" >&2
    # printf '\n' >&2
    # printf 'the theme has %d colors defined\n' ${#theme_colors[@]} >&2
    
}

quickload_color_themes () {
    local _path _key
    while read -r _path; do
        # don't load the full theme in memory here
        # just stuff the theme name in the array and give it a value of 1
        # meaning it exists.
        # Effectively load the theme only when necessary.
        _key="${_path##*/}"
        themes["${_key}"]="1"
    done < <(find $THEMES_DIR -type f)
}

# Transform color code from format PXXXXXXX to rgb:XXXX/XXXX/XXXX
console_color_to_device_independent_rgb () {
    local _seq _red _green _blue _regex_pattern _input _output
    _regex_pattern='P([0-9A-Fa-f])([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})'
    _input=$1
    _output=
    if [[ "${_input}" =~ ${_regex_pattern} ]]; then {
        _seq=${BASH_REMATCH[1]}
        _red=${BASH_REMATCH[2]}
        _green=${BASH_REMATCH[3]}
        _blue=${BASH_REMATCH[4]}
        # _seq="$(printf '%d' 0x${_seq})"
        _output="\"rgb:"${_red}${_red}"/"${_green}${_green}"/"${_blue}${_blue}"\""
    }                                             
    else
        local _error_msg
        _error_msg="$(printf 'console_color_to_device_independent_rgb: %s is not a valid color code\n' "${_input}")"
        die ${_error_msg} 
    fi
    printf '%s' ${_output}
}

# Transform color code from format #RRGGBB to rgb:XXXX/XXXX/XXXX
hash_rgb_color_to_device_independent_rgb () {
    local _seq _red _green _blue _regex_pattern _input _output
    _regex_pattern='#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})'
    _input=$1
    _output=
    if [[ "${_input}" =~ ${_regex_pattern} ]]; then {
        _red=${BASH_REMATCH[1]}
        _green=${BASH_REMATCH[2]}
        _blue=${BASH_REMATCH[3]}
        _output="\"rgb:"${_red}${_red}"/"${_green}${_green}"/"${_blue}${_blue}"\""
    }                                             
    else
        local _error_msg
        _error_msg="$(printf 'hash_rgb_color_to_device_independent_rgb: %s is not a valid color code\n' "${_input}")"
        die ${_error_msg} 
    fi
    printf '%s' ${_output}
}

# Transform color code from format rgb:XX/XX/XX to rgb:XXXX/XXXX/XXXX
rgb_color_to_device_independent_rgb () {
    local _seq _red _green _blue _regex_pattern _input _output
    _regex_pattern='rgb:([0-9a-fA-F]{2})/([0-9a-fA-F]{2})/([0-9a-fA-F]{2})'
    _input=$1
    _output=
    if [[ "${_input}" =~ ${_regex_pattern} ]]; then {
        _red=${BASH_REMATCH[1]}
        _green=${BASH_REMATCH[2]}
        _blue=${BASH_REMATCH[3]}
        _output="\"rgb:"${_red}${_red}"/"${_green}${_green}"/"${_blue}${_blue}"\""
    }                                             
    else
        local _error_msg
        _error_msg="$(printf 'Rrgb_color_to_device_independent_rgb: %s is not a valid color code\n' "$input")"
        die ${_error_msg} 
    fi
    printf '%s' ${_output}
}

# Transform color code from format rgb:XX/XX/XX to #XXXXXX
rgb_color_to_hash_rgb () {
    local _seq _red _green _blue _regex_pattern _input _output
    _regex_pattern='rgb:([0-9a-fA-F]{2})/([0-9a-fA-F]{2})/([0-9a-fA-F]{2})'
    _input=$1
    _output=
    if [[ "${_input}" =~ ${_regex_pattern} ]]; then {
        _red=${BASH_REMATCH[1]}
        _green=${BASH_REMATCH[2]}
        _blue=${BASH_REMATCH[3]}
        _output="#${_red}${_green}${_blue}"
    }                                             
    else
        local _error_msg
        _error_msg="$(printf 'rgb_color_to_device_independent_rgb: %s is not a valid color code\n' "$input")"
        die ${_error_msg} 
    fi
    printf '%s' ${_output}
}

# Transform color code from format P9RRGGBB to #RRGGBB
console_color_to_hash_rgb () {
    local _seq _red _green _blue _regex_pattern _input _output
    _regex_pattern='P([0-9A-Fa-f])([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})'
    _input=$1
    _output=
    if [[ "${_input}" =~ ${_regex_pattern} ]]; then {
        _seq=${BASH_REMATCH[1]}
        _red=${BASH_REMATCH[2]}
        _green=${BASH_REMATCH[3]}
        _blue=${BASH_REMATCH[4]}
        _seq="$(printf '%d' 0x${_seq})"
        _output="#${_red}${_green}${_blue}"
    }                                             
    else
        local _error_msg
        _error_msg="$(printf 'console_color_to_hash_rgb: %s is not a valid color code\n' "$input")"
        die ${_error_msg} 
    fi
    printf '%s' ${_output}
}

update_xresources () {

    local XRESOURCES
    declare -a XRESOURCES
    local _Xresources="$HOME/.Xresources"
    [[ -e ${_Xresources} ]] || {
        touch ${_Xresources}
        (( $? != 0 )) && die "can not create ${_Xresources}"
    }
    [[ -w ${_Xresources} ]] && chmod +w ${_Xresources}
    (( $? != 0 )) && die "can not write to  ${_Xresources}"
    # read $HOME/.Xresources into memory
    mapfile -t -n 0 XRESOURCES < <(cat ${_Xresources})
    

    # read the color theme file into memory
    
    local COLORTHEME
    declare -a COLORTHEME
    mapfile -t -n 0 COLORTHEME < <(cat "${color_theme_path}")

    # for every line in COLORTHEME that is not a comment line
    # search the line in XRESOURCES which is not a comment line and
    # which starts with the firs word from the COLORTHEME line.
    # when you find such lines, comment them
    #
    # Append the lines from COLORTHEME to XRESOURCES

    local i j xres_line theme_line first_word_xres first_word_theme
    declare -i i j



    for ((i=0; i<${#XRESOURCES[@]}; i++)); do
        xres_line="{XRESOURCES[$i]}"
        if [[ "${xres_line}" == '^$' ]]; then continue; fi
        if [[ "${xres_line}" == '[ ]*!' ]]; then continue; fi
        if [[ "!" == ${xres_line:0:1} ]]; then continue; fi
        if [[ "${xres_line}" == '(^[:alnum:]+\b)' ]]; then 
            first_word_xres=${BASH_REMATCH}
        fi
        
        for ((j=0; j<${#COLORTHEME[@]}; j++)); do
            theme_line="${COLOR_THEME[$j}"
            if [[ "${theme_line}" == '^$' ]]; then continue; fi
            if [[ "${theme_line}" == '[ ]*!' ]]; then continue; fi
            if [[ "${xres_line}" == '(^[:alnum:]+\b)' ]]; then
                first_word_theme=${BASH_REMATCH}
                if [[ $first_word_xres == $first_word_theme ]]; then
                    XRESOURCES[$i]="! ${xres_line}"
                    continue
                fi
            fi
        done
    done
}

switch_to_color_theme_on_gnome_terminal () {
    local _color _transformed_color _option 
    local _transformed_colors _options
    declare -a _transformed_colors _options
    local _regex_pattern
    _regex_pattern='#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})'
    local x
    # 16 base colors, bg and fg present depending on theme_format
    # if bg and fg not defined, default to one of the base colors - prefer dark bg
    # WARNING: bg and fg are in hash_rgb format or rgb:rr/gg/bb format
    local limit
    declare -i x limit
    declare -a _transformed_colors
    local result=

    case $theme_format in
        1)
            start=7
            limit=${#colors[@]}
            for ((x=$start; x<${limit}; x++)); do
                color=${colors[$x]}
                [[ "${!color}" ]] && {
                    _transformed_color=$(console_color_to_hash_rgb ${!color})
                    eval "${color}=${_transformed_color}"
                    _transformed_colors+=(${!color})
                }
            done                
            ;;
        2)
            start=0
            limit=${#colors[@]}
            for ((x=$start; x<${limit}; x++)); do
                color=${colors[$x]}
                [[ "${!color}" ]] && {
                    if [[ ${!color} =~ ${_regex_pattern} ]]; then
                        _transformed_color=${!color}
                    else
                        _transformed_color=$(rgb_color_to_hash_rgb ${!color})
                    fi
                    eval "${color}=${_transformed_color}"
                    _transformed_colors+=(${!color})
                }
            done
            ;;
        *)
            die "theme format unknown"
            ;;
    esac

    x=0
    for _color in "${_transformed_colors[@]}"; do
        ((x==0)) && echo -en ${_color} || echo -en ":"${_color}
        x=$((x+1))
    done
    clear
    env-info
}

switch_to_color_theme_on_xterm () {
    local _color _transformed_color _option 
    local _options
    declare -a _options
    local _regex_pattern
    _regex_pattern='#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})'
    _options=()
    local x
    # 16 base colors, bg and fg present depending on theme_format
    # if bg and fg not defined, default to one of the base colors - prefer dark bg
    # WARNING: bg and fg are in hash_rgb format or rgb:rr/gg/bb format
    local limit
    declare -i x limit

    case $theme_format in
        1)
            start=7
            limit=${#colors[@]}
            for ((x=$start; x<${limit}; x++)); do
                color=${colors[$x]}
                [[ "${!color}" ]] && {
                    _transformed_color=$(console_color_to_device_independent_rgb ${!color})
                    _option="--${color}="${_transformed_color}
                    _options+=(${_option})
                }
            done                
            ;;
        2)
            start=0
            limit=${#colors[@]}
            for ((x=$start; x<${limit}; x++)); do
                color=${colors[$x]}
                [[ "${!color}" ]] && {
                    if [[ ${!color} =~ ${_regex_pattern} ]]; then
                        _transformed_color=$(hash_rgb_color_to_device_independent_rgb ${!color})
                    else
                        _transformed_color=$(rgb_color_to_device_independent_rgb ${!color})
                    fi
                    case $x in 
                        0)
                            _option="--bg="${_transformed_color};;
                        1)
                            _option="--fg="${_transformed_color};;
                        3)
                            _option="--mouse-bg="${_transformed_color};;
                        4)
                            _option="--mouse-fg="${_transformed_color};;
                        6)
                            # --border is not supported by xtermcontrol
                            ;;
                        *)
                            _option="--${color}="${_transformed_color}
                    esac
                    _options+=(${_option})
                }
            done
            ;;
        *)
            die "theme format unknown"
            ;;
    esac
    
    eval $XTC "$(printf '%s ' "${_options[@]}" )"
    local _return_code=$?
    (( ${_return_code} != 0 )) &&
    printf '%s\n' "$XTC returned ${_return_code}" >&2
    
}

rgb_to_console_color () {
    # $1: color index X in the PXrrggbb format
    # $2: red
    # $3: green
    # $4: blue
    local index
    index=$(printf '%x' $1 | tr [:lower:] [:upper:])
    printf 'P%s%s%s%s' $index $2 $3 $4
}

switch_to_color_theme_on_console () {

    local color
    local x start
    declare -i x start
    _regex_pattern_1='#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})'
    _regex_pattern_2='rgb:([0-9a-fA-F]{2})/([0-9a-fA-F]{2})/([0-9a-fA-F]{2})'

    case $theme_format in
        1)
            start=7
            limit=${#colors[@]}
            for ((x=$start; x<${limit}; x++)); do
                color=${colors[$x]}
                [[ "${!color}" ]] && echo -en "\e]${!color}"
            done
            ;;
        2)
            start=7
            limit=${#colors[@]}
            for ((x=$start; x<${limit}; x++)); do
                color=${colors[$x]}
                if [[ ${!color} =~ ${_regex_pattern_1} ]]; then
                    _transformed_color=$(rgb_to_console_color $((x-7)) ${BASH_REMATCH[1]} ${BASH_REMATCH[2]} ${BASH_REMATCH[3]})
                elif [[ ${!color} =~ ${_regex_pattern_2} ]]; then
                    _transformed_color=$(rgb_to_console_color $((x-7)) ${BASH_REMATCH[1]} ${BASH_REMATCH[2]} ${BASH_REMATCH[3]})
                fi
                echo -en "\e]${_transformed_color}"
            done
            ;;
    esac    
    clear
    env-info
}

change_color () {
    case $1 in
        color*)
            send_osc 4 "${1#color};$2" ;;
        foreground)
            send_osc 10 "$2" ;;
        background)
            send_osc 11 "$2" ;;
        cursor)
            send_osc 12 "$2" ;;
        mouse_foreground)
            send_osc 13 "$2" ;;
        mouse_background)
            send_osc 14 "$2" ;;
        highlight)
            send_osc 17 "$2" ;;
        border)
            send_osc 708 "$2" ;;
    esac
}

send_escape_sequence () {
    escape_sequence="$1"
    
    # wrap escape sequence when within a TMUX session
    [ ! -z "$TMUX" ] && escape_sequence="${DSC}tmux;${ESC}${escape_sequence}${ESC}\\"
    
    printf "${escape_sequence}"
}

send_osc () {
    local ESC BEL DSC OSC Ps Pt
    ESC="\033"
    BEL="\007"
    DSC="${ESC}P"
    OSC="${ESC}]"
    Ps=$1
    Pt=$2
    command="$OSC$Ps;$Pt$BEL"
    send_escape_sequence $command
}

unset_colors () {
    for color in ${colors[@]}; do
        unset ${!color}
    done
}

set_colors () {
    for color in ${colors[@]}; do
        [[ ${!color} ]] && change_color "$color" "${!color}"
    done
}

switch_to_color_theme_on_urxvt () {
    local _color _transformed_color _option 
    local _transformed_colors _options
    declare -a _transformed_colors _options
    local _regex_pattern
    _regex_pattern='#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})'
    local x
    # 16 base colors, bg and fg present depending on theme_format
    # if bg and fg not defined, default to one of the base colors - prefer dark bg
    # WARNING: bg and fg are in hash_rgb format or rgb:rr/gg/bb format
    local limit
    declare -i x limit

    case $theme_format in
        1)
            start=7
            limit=${#colors[@]}
            for ((x=$start; x<${limit}; x++)); do
                color=${colors[$x]}
                [[ "${!color}" ]] && {
                    _transformed_color=$(console_color_to_hash_rgb ${!color})
                    eval ${color}=${_transformed_color}
                }
            done                
            ;;
        2)
            start=0
            limit=${#colors[@]}
            for ((x=$start; x<${limit}; x++)); do
                color=${colors[$x]}
                [[ "${!color}" ]] && {
                    if [[ ${!color} =~ ${_regex_pattern} ]]; then
                        _transformed_color=${!color}
                    else
                        _transformed_color=$(rgb_color_to_hash_rgb ${!color})
                    fi
                    eval ${color}=${_transformed_color}
                }
            done
            ;;
        *)
            die "theme format unknown"
            ;;
    esac

    set_colors
}


switch_to_color_theme () {
    local _key="$theme_name"
    [[ "${themes["$_key"]}" == "1" ]] || die "$(printf 'theme \"%s\" does not exist' "${_key}")"
    load_color_theme "${_key}"    
    
    # update .Xresources if requested - even when on console and/or the theme
    # is a console color theme
    if [[ "true" == "$update" ]]; then
        update_xresources
    fi

    case $TERM in
        xterm*)
            [[ "$COLORTERM" == "gnome-terminal" ]] &&
            ( switch_to_color_theme_on_gnome_terminal ) || 
            ( switch_to_color_theme_on_xterm )
            ;;
        
        *rxvt*)
            
            # use dynamic-colors to change the rxvt theme on the fly
                # do it in a subshell so as to not pollute the scripts environment
            ( switch_to_color_theme_on_urxvt )
            ;;

        *linux*)
            # activate on the console - only if the script actually is run on a console
            if on_console; then
                ( switch_to_color_theme_on_console )
            fi
            ;;

        *)
            printf 'switching color theme for terminal emulator %s is not implemented yet\n' $TERM >&2
            return 1
            ;;
        
    esac
}

tilde_expand () {
    local input 
    local pattern1='^~/'
    local pattern2='^~[^/]+'
    local pattern3='^\$HOME'
    local _home1="/home/$USER"
    local _home2="/home"
    # tilde expansion does not work in [[ ]] -> diy
    input="$1"
    if [[ "$input" =~ $pattern1 ]]; then
        input=${input/$BASH_REMATCH/${_home1}/}
    else
        if [[ "$input" =~ $pattern2 ]]; then
            input=${input/\~/${_home2}/}
        elif [[ "$input" =~ $pattern3 ]]; then
            input="${input/${BASH_REMATCH}/${_home1}}"
        fi
    fi
    printf '%s' "$input"
}


convert_image () {
    image="$1"
    printf "%s\n" "$(convert "$image" -colors 16 -format "%c" histogram:info:)"
}

create_theme_from_image () {
    local _image="$path_to_image"
    local _key="$theme_name"
    _theme=${themes["$_key"]}
    [[ "${_theme}" == "1" ]] && { 
        printf 'theme %s already exists\n' "${_key}"
        exit 1
    }
            
    COL=("0" "8" "1" "9" "2" "A" "3" "B" "4" "C" "5" "D" "6" "E" "7" "F");
    x=0

    # create the new theme file
    printf '# theme: %s - created from image %s\n' "${_key}" "${path_to_image}" >> "$THEMES_DIR"/"$_key"
    printf '\n' >> "$THEMES_DIR"/"$_key"

    convert_image "${_image}" | while read -r line; do
                                    line=${line#*#}; line=${line% srgb*}
                                    [[ "$line" ]] || continue # skip empty lines
                                    printf 'P%s%s\n' "${COL[$x]}" "$line" >> "$THEMES_DIR"/"$_key"
                                    x=$((x+1))
                                done 
    # printf 'theme %s created by sampling image %s\n' "${_key}" "${_image}"
}

update_xresources () {

    local XRESOURCES
    declare -a XRESOURCES
    local _Xresources="$HOME/.Xresources"
    [[ -e ${_Xresources} ]] || {
        touch ${_Xresources}
        (( $? != 0 )) && die "can not create ${_Xresources}"
    }
    [[ -w ${_Xresources} ]] && chmod +w ${_Xresources}
    (( $? != 0 )) && die "can not write to  ${_Xresources}"
    # read $HOME/.Xresources into memory
    mapfile -t -n 0 XRESOURCES < <(cat ${_Xresources})
    

    # read the color theme file into memory
    
    local COLORTHEME
    declare -a COLORTHEME
    mapfile -t -n 0 COLORTHEME < <(cat ${color_theme_path})

    # printf '%s\n' "${COLORTHEME[@]}"

    # for every line in COLORTHEME that is not a comment line
    # search the line in XRESOURCES which is not a comment line and
    # which starts with the firs word from the COLORTHEME line.
    # when you find such lines, comment them
    #
    # Append the lines from COLORTHEME to XRESOURCES

    local i j xres_line theme_line first_word_xres first_word_theme
    declare -i i j

    local pattern1 pattern2 pattern3

    pattern1='^$'
    pattern2='^[ ]*!'
    pattern3='^([A-Za-z0-9*]+:)'

    local modified_flag=

    for ((i=0; i<${#XRESOURCES[@]}; i++)); do
        xres_line="${XRESOURCES[$i]}"

        # printf -- '--->%s\n' "${xres_line}"

        if [[ "${xres_line}" =~ $pattern1 ]]; then continue; fi
        if [[ "${xres_line}" =~ $pattern2 ]]; then continue; fi
        if [[ "${xres_line}" =~ $pattern3 ]]; then 
            if [[ "!" == "${xres_line:0:1}" ]]; then continue; fi
            first_word_xres=${BASH_REMATCH}
                
                
            for ((j=0; j<${#COLORTHEME[@]}; j++)); do
                theme_line="${COLORTHEME[$j]}"
                if [[ "${theme_line}" =~ $pattern1 ]]; then continue; fi
                if [[ "${theme_line}" =~ $pattern2 ]]; then continue; fi
                if [[ "${theme_line}" =~ $pattern3 ]]; then
                    first_word_theme=${BASH_REMATCH}
                    
                    # printf -- '\n--> %s\n' "match"
                    
                    if [[ $first_word_xres == $first_word_theme ]]; then
                        XRESOURCES[$i]="! ${xres_line}"
                        modified_flag=true
                        continue
                    fi
                fi
            done
            
        fi
    done

    # Write the new .Xresources file to a tempfile
    local TEMPFILE=$(mktemp $HOME/tmp/console_colors.XXXXXX)
    [[ $TEMPFILE ]] || die "Could not create temp file"

    for xres_line in "${XRESOURCES[@]}"; do
        printf '%s\n' "$xres_line" >> ${TEMPFILE}
    done
    # append the new color_theme
    
    # append the new xres config snippet

    printf '\n%s\n' "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" >> ${TEMPFILE}
    printf '%s\n' "!! Added by console_colors !!" >> ${TEMPFILE}
    printf '%s\n' "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" >> ${TEMPFILE}

    for theme_line in "${COLORTHEME[@]}"; do
        printf '%s\n' "$theme_line" >> ${TEMPFILE}
    done
    set -e
    
    i=0
    while [[ -e "${_Xresources}.bak.$i" ]]; do
        i=$((i+1))
    done

    [[ -s $TEMPFILE ]] && {
        cp ${_Xresources} "${_Xresources}.bak.$i"
        mv ${TEMPFILE} ${_Xresources}
    }
    set +e
    printf '%s\n' "updated ${_Xresources}"
}

quickload_color_themes

case "$#" in
    0)
        usage ;;
    *)
        cmd="$1"
        shift
        case "$cmd" in
            s|switch)
                if (( $# == 0 )); then
                    printf '%b\n' "\033[36mcommand \"$cmd\" requires <theme-name>\033[0m"
                    usage
                else
                    theme_name="$1"
                    color_theme_path="${THEMES_DIR}"/"$1"
                    switch_to_color_theme "$theme_name"
                fi
                ;;


            c|create)
                if (( $# == 0 )); then
                    printf '%b\n' "\033[36mcommand \"$cmd\" requires <theme-name>\033[0m"
                    usage
                else
                    theme_name="$1"
                    color_theme_path="${THEMES_DIR}"/"$1"
                    shift
                    if (( $# == 0 )); then
                        printf '%b\n' "\033[36mcommand \"$cmd\" requires <path_to_image_file>\033[0m"
                        usage
                    else
                        path_to_image="$1"
                        shift
                        [[ -e "${path_to_image}" ]] || die "image file "${path_to_image}"  does not exist"
                        create_theme_from_image
                    fi
                fi
                ;;

            e|edit)
                if (( $# == 0 )); then
                    printf '%b\n' "\033[36mcommand \"$cmd\" requires <theme-name>\033[0m"
                    usage
                else
                    theme_name="$1"
                    color_theme_path="${THEMES_DIR}"/"$1"
                    shift
                    cd "$THEMES_DIR"
                    ${EDITOR:-/usr/bin/nano} "$theme_name"
                fi
                ;;

            l|list)
                if (( ${#themes[@]} == 0 )); then
                    die "zero themes found in ${THEMES_DIR}"
                else
                    for ident in "${!themes[@]}"; do
                        printf '%s\n' "$ident"
                    done | sort | columns --columns=4
                    
                    # printf '%s\n\n' "show all existing color themes..."
                    
                    
                    # for ident in "${!themes[@]}"; do
                    
                    #     if switch_to_color_theme "$ident" "n"; then
                    #         printf '\t%s' $ident
                    #         env-info
                    #         sleep 2
                    #     fi
                    # done
                fi
                ;;

            u|update)
                if (( $# == 0 )); then
                    printf '%b\n' "\033[36mcommand \"$cmd\" requires <theme-name>\033[0m"
                    usage
                else
                    theme_name="$1"
                    color_theme_path="${THEMES_DIR}"/"$1"
                    shift
                    update=true
                    switch_to_color_theme
                fi
                ;;

            r|remove)
                if (( $# == 0 )); then
                    printf '%b\n' "\033[36mcommand \"$cmd\" requires <theme-name>\033[0m"
                    usage
                else
                    theme_name="$1"
                    color_theme_path="${THEMES_DIR}"/"$1"
                    shift
                    if [[ "${themes[${theme_name}]}" == 1 ]]; then
                        rm -v "${THEMES_DIR}/${theme_name}"
                    else
                        die "theme does not exist"
                    fi
                fi
                ;;

            a|audit)
                if (( $# == 0 )); then
                    printf '%b\n' "\033[36mcommand \"$cmd\" requires <theme-name>\033[0m"
                    usage
                else
                    theme_name="$1"
                    color_theme_path="${THEMES_DIR}"/"$1"
                    shift
                    if [[ "${themes[${theme_name}]}" == 1 ]]; then
                        load_color_theme "${theme_name}"
                    else
                        die "theme does not exist"
                    fi
                fi
                ;;


            h|help)
                usage 
                ;;

            *)
                printf '%b\n' "\033[36m\"${cmd}\" is not a valid command \033[0m"
                usage ;;
        esac
esac

exit 0
