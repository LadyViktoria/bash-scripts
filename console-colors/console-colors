#!/bin/bash
# version 0.007

themes_dir="./console_colors"

error_exit() {
    echo "Script error: $1" >&2
    exit 1
}

usage () {
    if [[ -n "${1:-}" ]]; then
	printf "${*}\n\n" >&2
    fi
    cat >&2 << EOF
Usage: ${0} [OPTION]...

Options:
 none           List existing themes
 -a theme       Apply specified theme
 -c		Create a new theme from an existing image
 -i path        Path to the image to base the theme on
 -h             Show this help info
 -k theme       Key or theme identifier or filename to store the theme under

Rules:

. The presence of the -i or -k options implies creation of a
  theme. The -c option is then not required.

. if -a and -k are both set, the -a option is honored.

. if -c is specified but not -i and/or -k, then the required options 
  will be queried for interactively.

EOF
    exit 1
}

opt_apply=
opt_theme=
opt_create=
opt_image_path=
opt_key=

validate_arguments () {

    while getopts "a:ci:hk:" flag; do
        case "${flag}" in
            a)
                opt_apply=true
        	opt_theme="${OPTARG}"
        	;;
            c)
        	opt_create=true
        	;;
            i)
        	opt_image_path="${OPTARG}"
        	opt_create=true
                [[ -e "${opt_image_path}" ]] || error_exit "image file does not exist"
        	;;
            h)
        	usage
        	;;
            k)
                opt_key="${OPTARG}"
        	opt_create=true
                ;;
            *)
        	usage
        	;;
        esac
    done
    
    shift $((${OPTIND} - 1))
}

declare -A themes

load_color_theme () {
    local  _path="$1"
    local key=${_path##*/}
    # x is line counter; y is non-empty line counter
    local x=y=0
    local line _colors
    local regex_pattern_comment='^\#'
    local regex_pattern_p='^P'
    local regex_pattern_color='^P[0-9A-Fa-f]{7}'
    # echo "processing file... $_path"
    _colors=()
    while read -r line; do
        # printf '%s\n' "$line"
        x=$((x+1))
        [[ "$line" ]] || continue
        [[ "$line" =~ $regex_pattern_comment ]] && continue
        y=$((y+1))
        if [[ "$line" =~ $regex_pattern_color ]]; then
            _colors+=("$BASH_REMATCH")
        else
            printf 'syntax error in line #%d: %s\n' $x "${line}"
            printf '%s\n' "contains no valid color code"
        fi
    done < "$_path"
    local _this_theme
    _this_theme=$(printf '%s\n' "${_colors[@]}")
    # printf 'key: %s\n' "$key"
    themes["$key"]=${_this_theme}
}

load_color_themes () {
    while read -r _file; do
        load_color_theme "$_file"
    done < <(find $themes_dir -type f)
}

apply_color_theme () {
    local key="$1"
    local this_theme
    this_theme=${themes["$key"]}
    [[ "$this_theme" ]] || {
        error_exit "$(printf 'unknown color theme: %s' "$key")"
    }
    local x=0
    while read -r _color; do
        # printf '%s\n' "$line"
        x=$((x+1))
        echo -en "\e]${_color}"
    done <<< "$this_theme"
    clear
}

tilde_expand () {
    local input 
    local pattern1='^~/'
    local pattern2='^~[^/]+'
    local pattern3='^\$HOME'
    local _home1="/home/$USER"
    local _home2="/home"
    # tilde expansion does not work in [[ ]] -> diy
    input="$1"
    if [[ "$input" =~ $pattern1 ]]; then
        input=${input/$BASH_REMATCH/${_home1}/}
    else
        if [[ "$input" =~ $pattern2 ]]; then
            input=${input/\~/${_home2}/}
        elif [[ "$input" =~ $pattern3 ]]; then
            input="${input/${BASH_REMATCH}/${_home1}}"
        fi
    fi
    printf '%s' "$input"
}


convert_image () {
    image="$1"
    printf "%s\n" "$(convert "$image" -colors 16 -format "%c" histogram:info:)"
}

create_theme_using_palleter () {
    local _image="$opt_image_path"
    local _key="${opt_key}"

    [[ "${_key}" ]] || {
        echo "Please enter the theme identifier: "
        while read -r _key; do
            _theme=${themes["$_key"]}
            [[ "${_theme}" ]] && { 
                printf 'theme %s already exists. try again\n' "${_key}"
                continue
            }
            break
        done
    }
    _theme=${themes["$_key"]}
    [[ "${_theme}" ]] && { 
        printf 'theme %s already exists\n' "${_key}"
        exit 1
    }

    [[ "${opt_image_path}" ]] || {
        echo "Please enter the path to the image to be sampled: "
        while read -r _image; do
            printf 'image = %s\n' "${_image}"
            _image="$(tilde_expand "${_image}")"
            [[ -e "${_image}" ]] || {
                printf 'image %s does not exist. try again\n' "${_image}"
                continue
            }
            break
        done
    }

    COL=("0" "8" "1" "9" "2" "A" "3" "B" "4" "C" "5" "D" "6" "E" "7" "F");
    x=0

    # create the new theme file

    convert_image "${_image}" | while read -r line; do
                                    line=${line#*#}; line=${line% srgb*}
                                    [[ "$line" ]] || continue # skip empty lines
                                    printf 'P%s%s\n' "${COL[$x]}" "$line" >> "$themes_dir"/"$_key"
                                    x=$((x+1))
                                done 
    # printf 'theme %s created by sampling image %s\n' "${_key}" "${_image}"
}

validate_arguments "$@"

load_color_themes

(( $# == 0 )) && {
    for ident in "${!themes[@]}"; do
        printf '%s\n' "$ident"
    done | sort | columns --columns=4
    exit 0
}

if [[ true == "$opt_create" ]]; then 
    create_theme_using_palleter
elif [[ true == "$opt_apply" ]]; then
    apply_color_theme "${opt_theme}"
fi
