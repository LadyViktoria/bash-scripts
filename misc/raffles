#!/bin/bash
# shoutcast_radionomy_search.sh
# search shoutcast and radionomy,
# send url to radiotray, mpg123, mplayer or another player
# send url to streamripper to record
#
# needs curl, [radiotray, dbus | mpg123 | mplayer], streamripper, [xsel]
# xsel enables pasting from the X selection (to a config file etc.)
# Comment out line TODO "printf '%s'..." if you don't use it.
#
# KEYBOARD SHORTCUTS:
# Ctrl+C to exit normally
# Ctrl+\ to terminate and close player
# Ctrl+Z to start recording current station (handles SIGTSTP)

# Set this to something other than 'true'
# to have audio player exit with script.
# Otherwise player will continue till closed separately.
# Even with 'keep_player=true', if script is stopped with Ctrl+\
# then player will exit too.
keep_player=true

##### code to record a radio stream (url is $1) in a new terminal #####
# Add your own options to streamripper's command line,
# edit ~/.config/streamripper/streamripper.ini,
# change xterm to another terminal
# or use a different command altogether.
recorder() {
    ( setsid xterm -e streamripper "$1" >/dev/null 2>&1 & )
}

# where to put player control fifo
# (radiotray doesn't use this)
rpipe=/tmp/raffles/radio_pipe
[[ -d ${rpipe%/*} ]] || mkdir ${rpipe%/*}

############################## functions #################################

error_exit() {
    echo "Script error: $1" >&2
    player_ok=false
    exit 1
}

usage () {
    if [ -n "${1:-}" ]; then
	printf "${*}\n\n" >&2
    fi
    cat >&2 << EOF
Usage: ${0} [OPTION]...

Options:
 -p         	Specify player: mpg123|mplayer|streamripper
 -k		Keyword or genre
 -s		Pattern - as used in bash's [[ ]] - to match the station, ignoring case
 -a             Automatic - no user interaction at all
                both -k and -s options are required
                the player is only started when a matching station is found
                the first matching station is selected

Example:
                ${0} -pmpg123 -kjazz -sjazz41 -a

EOF
	exit 1
    
 }

player="mpg123"
keyword="jazz"
station=
automatic=

validate_arguments () {

    while getopts "p:k:s:a" flag; do
	case "${flag}" in
	    p)
		player="${OPTARG}"
                case "$player" in
                    mpg123|mplayer|streamripper)
                        :
                        ;;
                    *)
                        printf ' -p %s: invalid player\n' "$player"
                        usage
                        ;;
                esac
		;;
	    k)
		keyword="${OPTARG}"
		;;
	    s)
		station="${OPTARG}"
		;;
	    a)
		automatic=yes
		;;
	    *)
		usage
		;;
	esac
    done
    
    shift $((${OPTIND} - 1))

    [[ "$automatic" ]] && {
        [[ -z "$keyword" ]] || [[ -z "$station" ]]
    } && {
        printf '%s\n' ' both -k and -s must be specified for non-interactive use'
        exit 1
    }
}

get_keyword () {

    [[ -z "$keyword" ]] && {
        echo "Please enter keyword"
        read keyword
        keyword="${keyword// /%20}" # escape spaces for url
    }
}

setup () {
    case $player in
        
        ##### RADIOTRAY SETTINGS #####
        radiotray)
            required_commands='curl streamripper radiotray'
            start_player() {
                if pgrep radiotray >/dev/null
                then
                    echo "$player is already running"
                else
                    ( radiotray >/dev/null 2>&1 & )
                fi
            }
            radioplay() {
                radiotray $1
            }
            cleanup() { # run just before exit
                [[ $player_ok = true ]] && [[ $keep_player = true ]] && {
                    echo "$player will continue to play.
You can control it from the system tray icon
or run the script again to choose another station."
                    return
                }
                pkill radiotray && echo "Closed radiotray."
            }
            ;;
        ##### END RADIOTRAY #####
        
        ##### MPLAYER SETTINGS #####
        mplayer)
            required_commands='curl streamripper mplayer'
            player_regex="^mplayer .*-input file=$rpipe"
            launch_player() {
                [[ -p $rpipe ]] || { mkfifo "$rpipe" || error_exit "cannot make fifo $rpipe"; }
                ( setsid sh -c "mplayer -really-quiet -idle -slave -input file=$rpipe; rm -f $rpipe;" >/dev/null 2>&1 & )
                sleep 4 & launching_player=$!
            }
            load_url() {
                echo "loadlist $1" >"$rpipe"
            }
            ;;&
        ##### END MPLAYER #####
        
        ##### MPG123 SETTINGS #####
        mpg123)
            required_commands='curl streamripper mpg123'
            player_regex="^mpg123 .*--fifo $rpipe"
            launch_player() { # mpg123 will make fifo if necessary
                ( setsid sh -c "mpg123 --remote --fifo $rpipe; rm -f $rpipe;" >/dev/null 2>&1 & )
                # ( sleep 0.1; echo 'silence' >"$rpipe") &
                # launching_player=$!
                # printf 'launching_player: %d\n' $launching_player
            }
            load_url() {
                echo "loadlist 1 $1" >"$rpipe"
            }
            ;;&
        ##### END MPG123 #####
        
        ##### COMMON TO MPLAYER AND MPG123 #####
        mplayer|mpg123)
            start_player() {
                if pgrep -f "$player_regex" >/dev/null
                then
                    echo "$player is already running"
                    [[ -p $rpipe ]] || error_exit "fifo missing $rpipe"
                    # (:>"$rpipe") &
                    # test_pipe=$!
                    # printf 'test_pipe: %d\n' $test_pipe
                    # (sleep 0.1; kill $test_pipe 2>/dev/null && kill -s SIGPIPE $selfpid) &
                else
                    launch_player
                fi
            }
            radioplay() {
                wait $launching_player
                [[ -p $rpipe ]] || error_exit "fifo missing $rpipe"
                pgrep -f "$player_regex" >/dev/null || error_exit "$player not running"
                load_url "$1"
            }
            cleanup() { # run just before exit
                [[ -p $rpipe ]] || { player_ok=false; echo "Script error: fifo $rpipe does not exist." >&2 ;}
                pgrep -f "$player_regex" >/dev/null || { player_ok=false; echo "Script error: $player not running" >&2 ;}
                [[ $player_ok = true ]] && {
                    [[ $keep_player = true ]] && {
                        echo "$player will continue to play.
You can stop it with the command:
echo quit >$rpipe
or run the script again to choose another station." >&2
                        return
                    }
                    echo "closing $player..." >&2
                    echo 'quit' >"$rpipe" # try to close player nicely
                    sleep 0.1 # time for player to quit
                }
                pkill -f "$player_regex" && echo "$player close forced." >&2
                echo "removing $rpipe" >&2
                rm -f "$rpipe" # in case it has become a normal file
            }
            ;;
        ##### END COMMON TO MPLAYER AND MPG123 #####
        
        *)
            echo "$0: chosen player $player has not been configured.
Please check line 17 of the script" >&2
            exit 1
            ;;
    esac
}

search_shoutcast () {
    curl -s "http://www.shoutcast.com/Internet-Radio/$keyword" | awk '
BEGIN {
    RS="<div class=\"dirlist\">"
    FS=">"
}
NR < 2 {next}
{url = name = $2
sub(/^.*title=\"/,"",name)
sub(/\".*$/,"",name)
sub(/^.*href=\"/,"",url)
sub(/\".*$/,"",url)
print url,name }
' 
}

search_radionomy () {
    curl -s "http://www.radionomy.com/en/search?q=$keyword" | awk '
BEGIN {
    RS="<h2 class=\"radio-title-list\"><a href=\"/en/radio/"
    FS="</a></h2>"
}
NR < 2 {next}
{url = name = $1
sub(/^.*>/,"",name)
sub(/\/index\".*$/,"",url)
url="http://listen.radionomy.com/" url ".m3u"
print url,name }
'
}

search_server () {
    local server="$1"
    local keyword="$2"
    case "${server}" in
        shoutcast)
            search_shoutcast "$keyword"
            ;;
        radionomy)
            search_radionomy "$keyword"
            ;;
        *)
            error_exit "search server called with unknown server $server"
            ;;
    esac
}    

search_all_servers () {
    [[ "$1" ]] || error_exit "search_all_servers called without keyword"
    local keyword="$1"
    set -- shoutcast radionomy
    for _server ; do
        search_server "${_server}" "${keyword}"
    done
}

load_aa_stations () {
    local keyword="$1"
    local count=0
    while read -r url _station # read in search_all_servers output
    do
        [[ "$debug" ]] && printf '%s\n' "$url" "${_station}" >&2
        [[ "${_station}" ]] && {
            count=$(( count += 1 ))
            [[ "${aa_stations["${_station}"]}" ]] && {
                _station="$(printf '%s%d' "${_station}" $count)"
                [[ "$debug" ]] && printf '*** %s ***' "${_station}" >&2
            } 
            aa_stations["${_station}"]="$url"
        }
    done < <(search_all_servers "$keyword")
}

##########################################################################

validate_arguments "$@"

setup

selfpid=$$
player_ok=true
trap 'cleanup' EXIT
trap 'echo " Exit script
Goodbye..."; exit' SIGHUP SIGINT
trap 'error_exit "script terminated"' SIGQUIT SIGTERM
trap 'error_exit "broken pipe"' SIGPIPE
trap 'recorder "${playing_url%.m3u}"' SIGTSTP

missing_commands=
for i in $required_commands
do
    hash $i || missing_commands+=" $i"
done
[[ $missing_commands ]] && error_exit "This script requires the following commands: $missing_commands
Please install the packages containing the missing commands
and rerun the script."

[[ -z "$automatic" ]] && start_player

unset playing_name playing_url

PS3='Please enter the number of your choice > '

while true
do
    if [[ -z "${automatic}" ]]; then

        get_keyword
        
        # results=$( search_all_servers "$keyword" )
        
        unset aa_stations
        declare -A aa_stations # make associative array
        
        # load_aa_stations "$results"
        load_aa_stations "$keyword"
        
        while true; do
            menu=("${!aa_stations[@]}")
            [[ $playing_name && $playing_url ]] && menu+=("RECORD \"$playing_name\"")
            select _choice in "${menu[@]}" 'SEARCH AGAIN - SAME KEYWORD' 'CHANGE KEYWORD' QUIT
            do
                case "${_choice}" in
                    RECORD*)
                        recorder "${playing_url%.m3u}" # streamripper won't take m3u urls
                        ;;
                    SEARCH*)
                        break 2
                        ;;
                    *CHANGE\ KEYWORD)
                        keyword=
                        break 2
                        ;;
                    QUIT)
                        echo 'Goodbye...'; exit;
                        ;;
                    *)
                        # comment out next line if you don't use xsel
                        printf '%s\n' "${aa_stations[${_choice}]}" # | xsel --input #--clipboard  # can paste url
                        radioplay "${aa_stations[${_choice}]}"
                        playing_name="${_choice}"
                        playing_url="${aa_stations[${_choice}]}"
                        printf '\n\t >>> Playing %s (%s) <<<\n\n' "$playing_name" "$playing_url"
                        break 1
                        ;;
                esac
            done
        done
    else
        # non-interactive -> station and keyword are set
        
        unset aa_stations
        declare -A aa_stations # make associative array

        load_aa_stations "$keyword"
        shopt -s nocasematch # for matching station names against supplied pattern
        
        for _station in "${!aa_stations[@]}"
        do
            printf '%s\n' "$_station"
            if [[ "${_station}" =~ "$station" ]]
            then
                start_player; sleep 0.1
                printf '%s' "${aa_stations[$_station]}" # | xsel --input #--clipboard  # can paste url
                radioplay "${aa_stations[$_station]}"
                playing_name=$_station
                playing_url=${aa_stations[$_station]}
                printf '\n\t >>> Playing %s (%s) <<<\n\n' "$playing_name" "$playing_url"
                exit 0
            fi
        done
        printf 'Nothing found for keyword "%s" and station "%s"\n' "$keyword" "$station" >&2
        exit 1
    fi
done
        
exit 0
